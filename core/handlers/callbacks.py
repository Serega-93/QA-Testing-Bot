from telegram import Update
from telegram.ext import ContextTypes
import asyncio
from utils.feedback import get_feedback
from utils.keyboards import create_quiz_keyboard
from core.services.quiz import QuizService
from core.services.stats import StatsService
from data.database import load_questions
from data.storage import storage


async def handle_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
    """
    query = update.callback_query
    await query.answer()

    data = query.data

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–Ω–æ–ø–æ–∫
    if data == "cancel_test":
        await cancel_test_from_button(query, context)
    elif data == "restart_test":
        await restart_from_button(query, context)
    elif data == "restart_from_menu":
        await restart_from_menu_button(query, context)
    elif data == "show_stats_from_menu":
        await stats_from_menu(query, context)
    elif data == "start_test_from_menu":
        await start_test_from_menu(query, context)
    elif data == "level_junior":
        await start_junior_quiz(query, context)
    elif data == "level_middle":
        await start_middle_quiz(query, context)
    elif data == "main_menu":
        await main_menu(query, context)
    elif data == "reset_stats_confirm":
        await confirm_reset_stats(query, context)
    elif data == "reset_stats_yes":
        await reset_stats(query, context)
    elif data == "reset_stats_no":
        await main_menu(query, context)
    elif data.startswith("answer_"):
        await process_answer(query, data, context)


async def start_test_from_menu(query, context):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∞
    """
    from utils.keyboards import create_level_selection_keyboard

    level_selection_text = """
üéØ –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:

üéì Junior:
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö

üí™ Middle:
‚Ä¢ 1 –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞ –æ—Ç–≤–µ—Ç
‚Ä¢ –û—à–∏–±–∫–∞ = –∫–æ–Ω–µ—Ü —Ç–µ—Å—Ç–∞

–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:
    """

    await query.edit_message_text(
        level_selection_text,
        reply_markup=create_level_selection_keyboard()
    )


async def start_junior_quiz(query, context):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç –≤ —Ä–µ–∂–∏–º–µ Junior
    """
    questions = load_questions()
    if not questions:
        await query.edit_message_text("‚ùå –í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    # –ü–ï–†–ï–ú–ï–®–ò–í–ê–ï–ú –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    shuffled_questions = QuizService.shuffle_questions(questions)

    context.user_data.update({
        'questions': shuffled_questions,
        'current_question': 0,
        'score': 0,
        'level': 'junior'
    })

    junior_text = """
üéì –†–µ–∂–∏–º: Junior

–£—á–∏—Ç–µ—Å—å –≤ —Å–≤–æ–µ–º —Ç–µ–º–ø–µ! –û—à–∏–±–∞—Ç—å—Å—è - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ! üìö

–£–¥–∞—á–∏! üçÄ
    """

    await query.edit_message_text(junior_text, reply_markup=None)
    storage.track_message(query.from_user.id, query.message.message_id)

    await asyncio.sleep(1.5)
    await show_question_from_menu(query, context)


async def start_middle_quiz(query, context):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç –≤ —Ä–µ–∂–∏–º–µ Middle
    """
    questions = load_questions()
    if not questions:
        await query.edit_message_text("‚ùå –í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    # –ü–ï–†–ï–ú–ï–®–ò–í–ê–ï–ú –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    shuffled_questions = QuizService.shuffle_questions(questions)

    context.user_data.update({
        'questions': shuffled_questions,
        'current_question': 0,
        'score': 0,
        'level': 'middle'
    })

    middle_text = """
üí™ –†–µ–∂–∏–º: Middle

–í—Å–µ–≥–æ 1 –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞ –æ—Ç–≤–µ—Ç! –û—à–∏–±–∫–∞ = –∫–æ–Ω–µ—Ü —Ç–µ—Å—Ç–∞! ‚ö°

–ü–æ–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ –∑–Ω–∞–Ω–∏—è! üöÄ
    """

    await query.edit_message_text(middle_text, reply_markup=None)
    storage.track_message(query.from_user.id, query.message.message_id)

    await asyncio.sleep(1.5)
    await show_question_from_menu(query, context)


async def show_question_from_menu(query, context):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –í–°–ï–ì–î–ê –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    """
    result = await QuizService.get_current_question(context)

    if result is None:
        await finish_test_from_callback(query, context)
        return

    question, current_index = result

    # –ü–ï–†–ï–ú–ï–®–ò–í–ê–ï–ú –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    shuffled_options, new_correct_index = QuizService.shuffle_options(question)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data[f'correct_index_{current_index}'] = new_correct_index

    question_text = f"""
üéØ –í–æ–ø—Ä–æ—Å {current_index + 1}/{len(context.user_data['questions'])}
{question['question']}

""" + "\n".join([f"{i + 1}. {option}" for i, option in enumerate(shuffled_options)])

    level = context.user_data.get('level')
    if level == 'middle':
        question_text += "\n\n‚ö° –í—Å–µ–≥–æ 1 –ø–æ–ø—ã—Ç–∫–∞!"

    # –í–°–ï–ì–î–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    message = await query.message.reply_text(
        question_text,
        reply_markup=create_quiz_keyboard(question, current_index, shuffled_options)
    )

    storage.track_message(query.from_user.id, message.message_id)
    context.user_data['last_question_message_id'] = message.message_id


async def cancel_test_from_button(query, context):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
    for key in ['questions', 'current_question', 'score', 'last_question_message_id']:
        if key in context.user_data:
            del context.user_data[key]

    cancel_text = """
üö´ –¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω

–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
"""

    # –†–ï–î–ê–ö–¢–ò–†–£–ï–ú —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
    await query.edit_message_text(cancel_text, reply_markup=None)

    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await asyncio.sleep(1.5)
    await main_menu(query, context)


async def main_menu(query, context):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ë–´–°–¢–†–û–ô –æ—á–∏—Å—Ç–∫–æ–π
    """
    from utils.keyboards import create_main_menu_keyboard

    user = query.from_user
    user_id = user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    StatsService.init_user(user_id, user.username, user.first_name)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = StatsService.get_user_stats(user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
    junior_stats = ""
    middle_stats = ""

    if stats and (stats.junior_tests > 0 or stats.middle_tests > 0):
        if stats.junior_tests > 0:
            junior_success = StatsService.calculate_level_success_rate(stats, "junior")
            junior_best_percentage = StatsService.calculate_best_score_percentage(stats, "junior")
            junior_stats = f"""üéì Junior
    ‚Ä¢ –¢–µ—Å—Ç–æ–≤: {stats.junior_tests}
    ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats.junior_total_correct}/{stats.junior_total_questions}
    ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {junior_success}%
    ‚Ä¢ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats.junior_best_score}/100 ({junior_best_percentage}%)"""

        if stats.middle_tests > 0:
            middle_success = StatsService.calculate_level_success_rate(stats, "middle")
            middle_best_percentage = StatsService.calculate_best_score_percentage(stats, "middle")
            middle_stats = f"""üí™ Middle
    ‚Ä¢ –¢–µ—Å—Ç–æ–≤: {stats.middle_tests}
    ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats.middle_total_correct}/{stats.middle_total_questions}
    ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {middle_success}%
    ‚Ä¢ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats.middle_best_score}/100 ({middle_best_percentage}%)"""

        if junior_stats and middle_stats:
            stats_section = f"""üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

    {junior_stats}

    {middle_stats}"""
        else:
            stats_section = f"""üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

    {junior_stats}{middle_stats}"""
    else:
        stats_section = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ø—Ä–æ–π–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç!"

    welcome_text = f"""–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π QA.

    {stats_section}

    üìö –ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:
    ‚Ä¢ 100 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –æ—Å–Ω–æ–≤–∞–º QA
    ‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏—è –∫ –∫–∞–∂–¥–æ–º—É –æ—Ç–≤–µ—Ç—É  
    ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? üöÄ"""

    # 1. –û–ß–ò–°–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô —á–µ—Ä–µ–∑ –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await clear_chat_history(query, context)

    # 2. –†–ï–î–ê–ö–¢–ò–†–£–ï–ú —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        welcome_text,
        reply_markup=create_main_menu_keyboard()
    )


async def restart_from_button(query, context):
    """
    –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
    """

    await clear_chat_history(query, context)

    # –ó–ê–ì–†–£–ñ–ê–ï–ú –í–û–ü–†–û–°–´ –ó–ê–ù–û–í–û
    questions = load_questions()
    if not questions:
        await query.edit_message_text("‚ùå –í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
    for key in ['current_question', 'score', 'last_question_message_id', 'questions']:
        if key in context.user_data:
            del context.user_data[key]

    # –ó–ê–ì–†–£–ñ–ê–ï–ú –ù–û–í–´–ï –í–û–ü–†–û–°–´
    context.user_data['questions'] = QuizService.shuffle_questions(questions)
    context.user_data['current_question'] = 0
    context.user_data['score'] = 0

    restart_text = """
üîÑ –¢–µ—Å—Ç –Ω–∞—á–∞—Ç –∑–∞–Ω–æ–≤–æ!
–í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω.
–£–¥–∞—á–∏! üçÄ
    """

    await query.edit_message_text(restart_text, reply_markup=None)
    await asyncio.sleep(1.5)

    await show_question_from_menu(query, context)


async def restart_from_menu_button(query, context):
    """
    –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()

    restart_text = """
üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!

–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã. –í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.

–ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤—ã–º –∏—Å–ø—ã—Ç–∞–Ω–∏—è–º? üöÄ
    """

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await query.edit_message_text(restart_text, reply_markup=None)

    # –ß–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await asyncio.sleep(1)
    await main_menu(query, context)


async def stats_from_menu(query, context):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    from utils.keyboards import create_stats_keyboard

    last_score = context.user_data.get('last_score')
    last_total = context.user_data.get('last_total')

    if last_score is None or last_total is None:
        stats_text = "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç —Å–Ω–∞—á–∞–ª–∞!"
    else:
        percentage = round((last_score / last_total) * 100)
        stats_text = f"""
üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {last_score}/{last_total} ({percentage}%)
üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {percentage}%

{get_feedback(last_score, last_total)}
        """

    await query.edit_message_text(
        stats_text,
        reply_markup=create_stats_keyboard()
    )


async def process_answer(query, callback_data, context):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    parts = callback_data.split('_')
    question_index = int(parts[1])
    answer_index = int(parts[2])

    questions = context.user_data['questions']
    question = questions[question_index]
    level = context.user_data.get('level', 'junior')

    # –ü–æ–ª—É—á–∞–µ–º –ü–†–ê–í–ò–õ–¨–ù–´–ô –∏–Ω–¥–µ–∫—Å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    correct_index = context.user_data.get(f'correct_index_{question_index}', question['correct_answer'])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    is_correct = answer_index == correct_index

    if is_correct:
        context.user_data['score'] += 1
        result_icon = "‚úÖ"
        result_text = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
    else:
        result_icon = "‚ùå"
        correct_answer_number = correct_index + 1
        result_text = f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!"

        # –î–õ–Ø MIDDLE: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç = –∫–æ–Ω–µ—Ü —Ç–µ—Å—Ç–∞
        if level == 'middle':
            await finish_middle_test_early(query, context, question_index + 1)
            return

    result_message = f"""{result_icon} –í–æ–ø—Ä–æ—Å {question_index + 1}: {result_text}

üí° {question['explanation']}"""

    # 1. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞
    result_msg = await query.message.reply_text(result_message)

    # –°–û–•–†–ê–ù–Ø–ï–ú ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    storage.track_message(query.from_user.id, result_msg.message_id)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    context.user_data['current_question'] += 1

    if QuizService.is_quiz_finished(context):
        await finish_test_from_callback(query, context)
        return

    # 2. –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –°–õ–ï–î–£–Æ–©–ò–ô –≤–æ–ø—Ä–æ—Å
    await asyncio.sleep(1)
    await show_next_question_always_new(query, context)


async def show_next_question_always_new(query, context):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –í–°–ï–ì–î–ê –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    """
    result = await QuizService.get_current_question(context)

    if result is None:
        await finish_test_from_callback(query, context)
        return

    question, current_index = result

    # –ü–ï–†–ï–ú–ï–®–ò–í–ê–ï–ú –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    shuffled_options, new_correct_index = QuizService.shuffle_options(question)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data[f'correct_index_{current_index}'] = new_correct_index

    question_text = f"""
üéØ –í–æ–ø—Ä–æ—Å {current_index + 1}/{len(context.user_data['questions'])}
{question['question']}

""" + "\n".join([f"{i + 1}. {option}" for i, option in enumerate(shuffled_options)])

    level = context.user_data.get('level')
    if level == 'middle':
        question_text += "\n\n‚ö° –í—Å–µ–≥–æ 1 –ø–æ–ø—ã—Ç–∫–∞!"

    # –í–°–ï–ì–î–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    message = await query.message.reply_text(
        question_text,
        reply_markup=create_quiz_keyboard(question, current_index, shuffled_options)
    )

    storage.track_message(query.from_user.id, message.message_id)
    context.user_data['last_question_message_id'] = message.message_id


async def finish_test_from_callback(query, context):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∏–∑ callback
    """
    from utils.keyboards import create_restart_keyboard

    score, total = QuizService.get_quiz_results(context)
    level = context.user_data.get('level', 'junior')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    context.user_data['last_score'] = score
    context.user_data['last_total'] = total

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result_text = f"""
üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!

üìä –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{total}
üíØ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {round(score / total * 100)}%

{get_feedback(score, total)}
    """

    # –°–û–•–†–ê–ù–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê –° –£–ß–ï–¢–û–ú –£–†–û–í–ù–Ø
    StatsService.save_test_result(
        user_id=query.from_user.id,
        score=score,
        total_questions=total,
        level=level
    )

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
    for key in ['current_question', 'score', 'last_question_message_id', 'questions']:
        if key in context.user_data:
            del context.user_data[key]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
    result_message = await query.message.reply_text(
        result_text,
        reply_markup=create_restart_keyboard(),
        parse_mode='Markdown'
    )

    # –°–û–•–†–ê–ù–Ø–ï–ú ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç–µ—Å—Ç–∞
    storage.track_message(query.from_user.id, result_message.message_id)


async def finish_middle_test_early(query, context, questions_answered):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç Middle –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    from utils.keyboards import create_restart_keyboard
    from core.services.stats import StatsService

    score = context.user_data['score']
    level = context.user_data.get('level', 'middle')
    total_questions = len(context.user_data.get('questions', []))

    result_text = f"""
üí• –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!

–í —Ä–µ–∂–∏–º–µ Middle –≤—Å–µ–≥–æ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞ –æ—Ç–≤–µ—Ç.

üìä –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score}/{questions_answered}
‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {questions_answered}
‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ: {total_questions}

üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ–∂–∏–º Junior –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!
    """

    # –°–û–•–†–ê–ù–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê –° –£–ß–ï–¢–û–ú –£–†–û–í–ù–Ø - –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    StatsService.save_test_result(
        user_id=query.from_user.id,
        score=score,
        total_questions=total_questions,
        level=level
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    context.user_data['last_score'] = score
    context.user_data['last_total'] = total_questions

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for key in ['current_question', 'score', 'questions', 'last_question_message_id']:
        if key in context.user_data:
            del context.user_data[key]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    result_message = await query.message.reply_text(
        result_text,
        reply_markup=create_restart_keyboard(),
        parse_mode='Markdown'
    )

    # –°–û–•–†–ê–ù–Ø–ï–ú ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç–µ—Å—Ç–∞
    storage.track_message(query.from_user.id, result_message.message_id)


async def confirm_reset_stats(query, context):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    from utils.keyboards import create_confirmation_keyboard

    warning_text = """
‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!

–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:
‚Ä¢ –£–¥–∞–ª–∏—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤
‚Ä¢ –°–±—Ä–æ—Å–∏—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è  
‚Ä¢ –ù–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å!

–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?
    """

    await query.edit_message_text(
        warning_text,
        reply_markup=create_confirmation_keyboard()
    )


async def reset_stats(query, context):
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    user_id = query.from_user.id

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    storage.reset_user_stats(user_id)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    success_text = """
üóëÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞!

–í—Å—è –≤–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã.

–ù–∞—á–Ω–∏—Ç–µ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞! üöÄ
    """

    await query.edit_message_text(success_text, reply_markup=None)

    # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await asyncio.sleep(2)
    await main_menu(query, context)


async def clear_chat_history(query, context):
    """
    –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
    """
    user_id = query.from_user.id
    chat_id = query.message.chat_id
    current_message_id = query.message.message_id

    try:
        # 1. –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ê–ù–ò–ú–ò–†–û–í–ê–ù–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï
        cleanup_msg = await query.message.reply_text("üßπ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...")
        storage.track_message(user_id, cleanup_msg.message_id)

        # 2. –ê–ù–ò–ú–ê–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò
        dots = ["", ".", "..", "..."]
        for i in range(8):  # 2 —Å–µ–∫—É–Ω–¥—ã –∞–Ω–∏–º–∞—Ü–∏–∏
            await cleanup_msg.edit_text(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏{dots[i % 4]}")
            await asyncio.sleep(0.25)

        # 3. –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ß–ò–°–¢–ö–ò (–∫–∞–∫ –≤ –≤–∞—Ä–∏–∞–Ω—Ç–µ 1)
        message_ids = storage.get_user_messages(user_id)
        batch_size = 10
        deleted_count = 0

        for i in range(0, len(message_ids), batch_size):
            batch = message_ids[i:i + batch_size]
            messages_to_delete = [msg_id for msg_id in batch if msg_id != current_message_id]

            if messages_to_delete:
                delete_tasks = []
                for message_id in messages_to_delete:
                    try:
                        task = context.bot.delete_message(chat_id, message_id)
                        delete_tasks.append(task)
                    except Exception:
                        pass

                if delete_tasks:
                    await asyncio.gather(*delete_tasks, return_exceptions=True)
                    deleted_count += len(messages_to_delete)

                await asyncio.sleep(0.1)

        # 4. –§–ò–ù–ê–õ–¨–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï
        await cleanup_msg.edit_text(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ ({deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π)")

        # 5. –£–î–ê–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ß–ï–†–ï–ó 1.5 –°–ï–ö–£–ù–î–´
        await asyncio.sleep(1.5)
        await context.bot.delete_message(chat_id, cleanup_msg.message_id)

        # 6. –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        storage.clear_user_messages(user_id)
        storage.track_message(user_id, current_message_id)

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
