from telegram import Update
from telegram.ext import ContextTypes
import asyncio

from utils.keyboards import create_main_menu_keyboard, create_stats_keyboard, create_quiz_keyboard
from core.services.quiz import QuizService

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
quiz_service = QuizService()


async def handle_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
    """
    query = update.callback_query
    await query.answer()

    data = query.data

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–Ω–æ–ø–æ–∫
    if data == "cancel_test":
        await cancel_test_from_button(query, context)
    elif data == "restart_test":
        await restart_from_button(query, context)
    elif data == "restart_from_menu":
        await restart_from_menu_button(query, context)
    elif data == "show_stats_from_menu":
        await stats_from_menu(query, context)
    elif data == "start_test_from_menu":
        await start_test_from_menu(query, context)
    elif data == "main_menu":
        await main_menu(query, context)
    elif data.startswith("answer_"):
        await process_answer(query, data, context)


async def start_test_from_menu(query, context):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    success = await quiz_service.start_quiz(context)

    if not success:
        await query.edit_message_text("‚ùå –í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    await show_question_from_menu(query, context)


async def show_question_from_menu(query, context):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–∑ –º–µ–Ω—é
    """
    result = await QuizService.get_current_question(context)

    if result is None:
        await finish_test_from_callback(query, context)
        return

    question, current_index = result

    question_text = f"""
üéØ –í–æ–ø—Ä–æ—Å {current_index + 1}/{len(context.user_data['questions'])}
{question['question']}

""" + "\n".join([f"{i + 1}. {option}" for i, option in enumerate(question['options'])])

    await query.edit_message_text(
        question_text,
        reply_markup=create_quiz_keyboard(question, current_index)
    )


async def cancel_test_from_button(query, context):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
    for key in ['questions', 'current_question', 'score', 'last_question_message_id']:
        if key in context.user_data:
            del context.user_data[key]

    cancel_text = """
üö´ –¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω

–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
"""

    await query.message.reply_text(cancel_text)
    await main_menu(query, context)


async def main_menu(query, context):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞
    """
    user = query.from_user

    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø - –¥–µ–º–æ-–±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π QA. 

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∏ —É–∑–Ω–∞–π—Ç–µ —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ!

üìö –ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:
‚Ä¢ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –æ—Å–Ω–æ–≤–∞–º QA
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∫ –∫–∞–∂–¥–æ–º—É –æ—Ç–≤–µ—Ç—É
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? üöÄ
    """

    await query.edit_message_text(
        welcome_text,
        reply_markup=create_main_menu_keyboard()
    )


async def restart_from_button(query, context):
    """
    –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
    """
    # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞, –æ—Å—Ç–∞–≤–ª—è—è –≤–æ–ø—Ä–æ—Å—ã
    questions = context.user_data.get('questions', [])
    for key in ['current_question', 'score', 'last_question_message_id']:
        if key in context.user_data:
            del context.user_data[key]

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
    if questions:
        context.user_data['questions'] = questions

    restart_text = """
üîÑ –¢–µ—Å—Ç –Ω–∞—á–∞—Ç –∑–∞–Ω–æ–≤–æ!

–í—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω. –£–¥–∞—á–∏! üçÄ
    """

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    await query.edit_message_text(restart_text, reply_markup=None)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç
    context.user_data['current_question'] = 0
    context.user_data['score'] = 0

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await show_question_from_menu(query, context)


async def restart_from_menu_button(query, context):
    """
    –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()

    restart_text = """
üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!

–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã. –í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.

–ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤—ã–º –∏—Å–ø—ã—Ç–∞–Ω–∏—è–º? üöÄ
    """

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await query.edit_message_text(restart_text, reply_markup=None)

    # –ß–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await asyncio.sleep(1)
    await main_menu(query, context)


async def stats_from_menu(query, context):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    from core.handlers.commands import get_feedback  # –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç

    last_score = context.user_data.get('last_score')
    last_total = context.user_data.get('last_total')

    if last_score is None or last_total is None:
        stats_text = "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç —Å–Ω–∞—á–∞–ª–∞!"
    else:
        percentage = round((last_score / last_total) * 100)
        stats_text = f"""
üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {last_score}/{last_total} ({percentage}%)
üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {percentage}%

{get_feedback(last_score, last_total)}
        """

    await query.edit_message_text(stats_text, reply_markup=create_stats_keyboard())


async def process_answer(query, data, context):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data: "answer_–Ω–æ–º–µ—Ä_–≤–æ–ø—Ä–æ—Å–∞_–Ω–æ–º–µ—Ä_–æ—Ç–≤–µ—Ç–∞"
    parts = data.split('_')
    question_index = int(parts[1])
    answer_index = int(parts[2])

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    result_message, is_correct = await QuizService.process_answer(context, question_index, answer_index)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    await query.message.reply_text(result_message)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ —Ç–µ—Å—Ç
    if QuizService.is_quiz_finished(context):
        await finish_test_from_callback(query, context)
        return

    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º
    await asyncio.sleep(1)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await show_next_question(query, context)


async def show_next_question(query, context):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    """
    result = await QuizService.get_current_question(context)

    if result is None:
        await finish_test_from_callback(query, context)
        return

    question, current_index = result

    question_text = f"""
üéØ –í–æ–ø—Ä–æ—Å {current_index + 1}/{len(context.user_data['questions'])}
{question['question']}

""" + "\n".join([f"{i + 1}. {option}" for i, option in enumerate(question['options'])])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    message = await query.message.reply_text(
        question_text,
        reply_markup=create_quiz_keyboard(question, current_index)
    )
    context.user_data['last_question_message_id'] = message.message_id


async def finish_test_from_callback(query, context):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∏–∑ callback
    """
    from core.handlers.commands import get_feedback  # –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
    from utils.keyboards import create_restart_keyboard

    score, total = QuizService.get_quiz_results(context)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    context.user_data['last_score'] = score
    context.user_data['last_total'] = total

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result_text = f"""
üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!

üìä –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{total}
üíØ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {round(score / total * 100)}%

{get_feedback(score, total)}
    """

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
    for key in ['current_question', 'score', 'last_question_message_id']:
        if key in context.user_data:
            del context.user_data[key]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await query.message.reply_text(result_text, reply_markup=create_restart_keyboard())
