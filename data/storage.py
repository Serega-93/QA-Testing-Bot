import sqlite3
import os
from typing import List, Optional
from datetime import datetime
from .models import User, UserStats, Achievement


class Storage:
    def __init__(self, db_path: str = "data/qa_bot.db"):
        self.db_path = db_path
        self.user_messages = {}
        self._init_database()

    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ë–î
        if os.path.exists(self.db_path):
            print(f"üìÅ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ë–î: {self.db_path}")
            # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –Ω–µ —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
            self._update_database_schema()
            return

        print(f"üìÅ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è: {os.path.dirname(self.db_path)}")
        os.makedirs(os.path.dirname(self.db_path), exist_ok=True)

        print(f"üîß –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î: {self.db_path}")
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ü–ï–†–í–û–ô
            print("üõ†Ô∏è –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users...")
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    created_at TEXT
                )
            ''')

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            print("üõ†Ô∏è –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_stats...")
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_stats (
                    user_id INTEGER PRIMARY KEY,
                    total_tests INTEGER DEFAULT 0,
                    best_score INTEGER DEFAULT 0,
                    total_correct_answers INTEGER DEFAULT 0,
                    total_questions_answered INTEGER DEFAULT 0,
                    last_test_date TEXT,
                    junior_tests INTEGER DEFAULT 0,
                    junior_best_score INTEGER DEFAULT 0,
                    junior_total_correct INTEGER DEFAULT 0,
                    junior_total_questions INTEGER DEFAULT 0,
                    middle_tests INTEGER DEFAULT 0,
                    middle_best_score INTEGER DEFAULT 0,
                    middle_total_correct INTEGER DEFAULT 0,
                    middle_total_questions INTEGER DEFAULT 0,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
            print("üõ†Ô∏è –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É test_results...")
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS test_results (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    score INTEGER,
                    total_questions INTEGER,
                    test_date TEXT,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            print("üõ†Ô∏è –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É achievements...")
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS achievements (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    achievement_name TEXT,
                    earned_date TEXT,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–ª–∏—Å—å
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = cursor.fetchall()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {tables}")
            self._update_database_schema()
            self.debug_check_table_columns()

            conn.commit()

        print("‚úÖ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")


    def save_user(self, user: User):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR REPLACE INTO users (user_id, username, first_name, created_at)
                VALUES (?, ?, ?, ?)
            ''', (user.user_id, user.username, user.first_name, user.created_at))
            conn.commit()


    def get_user_stats(self, user_id: int) -> Optional[UserStats]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT * FROM user_stats WHERE user_id = ?
            ''', (user_id,))

            row = cursor.fetchone()

            if row:
                print(f"üîç DEBUG get_user_stats: user_id={user_id}, row found: True")
                print(f"üîç DEBUG - full row: {row}")

                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç UserStats –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ë–î
                stats = UserStats(
                    user_id=row[0],
                    total_tests=row[1],
                    best_score=row[2],
                    total_correct_answers=row[3],
                    total_questions_answered=row[4],
                    last_test_date=row[5],
                    junior_tests=row[6],
                    junior_best_score=row[7],
                    junior_total_correct=row[8],
                    junior_total_questions=row[9],
                    middle_tests=row[10],
                    middle_best_score=row[11],
                    middle_total_correct=row[12],
                    middle_total_questions=row[13]
                )
                return stats
            else:
                print(f"üîç DEBUG get_user_stats: user_id={user_id}, row found: False")
                return None


    def get_user_achievements(self, user_id: int) -> List[Achievement]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT user_id, achievement_name, earned_date 
                FROM achievements WHERE user_id = ?
            ''', (user_id,))

            return [Achievement(row[0], row[1], row[2]) for row in cursor.fetchall()]


    def debug_print_all_data(self):
        """–í—ã–≤–æ–¥–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        print("üîç –î–ï–ë–ê–ì: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î:")

        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("SELECT * FROM users")
            users = cursor.fetchall()
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cursor.execute("SELECT * FROM user_stats")
            stats = cursor.fetchall()
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
            cursor.execute("SELECT * FROM test_results")
            results = cursor.fetchall()
            print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤: {results}")


    def reset_user_stats(self, user_id: int):
        """
        –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cursor.execute('DELETE FROM user_stats WHERE user_id = ?', (user_id,))

            # –£–¥–∞–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
            cursor.execute('DELETE FROM test_results WHERE user_id = ?', (user_id,))

            # –£–¥–∞–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            cursor.execute('DELETE FROM achievements WHERE user_id = ?', (user_id,))

            conn.commit()

        print(f"üóëÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω–∞")


    def save_test_result_with_level(self, user_id: int, score: int, total_questions: int, level: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        test_date = datetime.now().isoformat()

        print(f"üîç –°–û–•–†–ê–ù–ï–ù–ò–ï: user_id={user_id}, score={score}, total={total_questions}, level={level}")

        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
                cursor.execute('''
                        INSERT INTO test_results (user_id, score, total_questions, test_date)
                        VALUES (?, ?, ?, ?)
                    ''', (user_id, score, total_questions, test_date))
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_results")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
                if level == "junior":
                    print(f"üîç –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É JUNIOR...")
                    cursor.execute('''
                            INSERT OR REPLACE INTO user_stats 
                            (user_id, total_tests, best_score, total_correct_answers, total_questions_answered, 
                             last_test_date, junior_tests, junior_best_score, junior_total_correct, junior_total_questions,
                             middle_tests, middle_best_score, middle_total_correct, middle_total_questions)
                            VALUES (
                                ?,
                                COALESCE((SELECT total_tests FROM user_stats WHERE user_id = ?), 0) + 1,
                                MAX(COALESCE((SELECT best_score FROM user_stats WHERE user_id = ?), 0), ?),
                                COALESCE((SELECT total_correct_answers FROM user_stats WHERE user_id = ?), 0) + ?,
                                COALESCE((SELECT total_questions_answered FROM user_stats WHERE user_id = ?), 0) + ?,
                                ?,
                                COALESCE((SELECT junior_tests FROM user_stats WHERE user_id = ?), 0) + 1,
                                MAX(COALESCE((SELECT junior_best_score FROM user_stats WHERE user_id = ?), 0), ?),
                                ?,  -- junior_total_correct: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞
                                ?,  -- junior_total_questions: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞
                                COALESCE((SELECT middle_tests FROM user_stats WHERE user_id = ?), 0),
                                COALESCE((SELECT middle_best_score FROM user_stats WHERE user_id = ?), 0),
                                COALESCE((SELECT middle_total_correct FROM user_stats WHERE user_id = ?), 0),
                                COALESCE((SELECT middle_total_questions FROM user_stats WHERE user_id = ?), 0)
                            )
                        ''', (user_id, user_id, user_id, score, user_id, score, user_id, total_questions,
                              test_date,
                              user_id, user_id, score,
                              score,  # junior_total_correct = —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞
                              total_questions,  # junior_total_questions = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞
                              user_id, user_id, user_id, user_id))  # middle –ø–æ–ª—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
                    print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ JUNIOR –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

                elif level == "middle":
                    print(f"üîç –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É MIDDLE...")
                    cursor.execute('''
                            INSERT OR REPLACE INTO user_stats 
                            (user_id, total_tests, best_score, total_correct_answers, total_questions_answered, 
                             last_test_date, junior_tests, junior_best_score, junior_total_correct, junior_total_questions,
                             middle_tests, middle_best_score, middle_total_correct, middle_total_questions)
                            VALUES (
                                ?,
                                COALESCE((SELECT total_tests FROM user_stats WHERE user_id = ?), 0) + 1,
                                MAX(COALESCE((SELECT best_score FROM user_stats WHERE user_id = ?), 0), ?),
                                COALESCE((SELECT total_correct_answers FROM user_stats WHERE user_id = ?), 0) + ?,
                                COALESCE((SELECT total_questions_answered FROM user_stats WHERE user_id = ?), 0) + ?,
                                ?,
                                COALESCE((SELECT junior_tests FROM user_stats WHERE user_id = ?), 0),
                                COALESCE((SELECT junior_best_score FROM user_stats WHERE user_id = ?), 0),
                                COALESCE((SELECT junior_total_correct FROM user_stats WHERE user_id = ?), 0),
                                COALESCE((SELECT junior_total_questions FROM user_stats WHERE user_id = ?), 0),
                                COALESCE((SELECT middle_tests FROM user_stats WHERE user_id = ?), 0) + 1,
                                MAX(COALESCE((SELECT middle_best_score FROM user_stats WHERE user_id = ?), 0), ?),
                                ?,  -- middle_total_correct: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞
                                ?   -- middle_total_questions: –≤—Å–µ–≥–¥–∞ 100 –¥–ª—è Middle
                            )
                        ''', (user_id, user_id, user_id, score, user_id, score, user_id, 100,
                              test_date,
                              user_id, user_id, user_id, user_id,  # junior –ø–æ–ª—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
                              user_id, user_id, score,
                              score,  # middle_total_correct = —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞
                              100))  # middle_total_questions = –≤—Å–µ–≥–¥–∞ 100
                    print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ MIDDLE –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

                conn.commit()
                print(f"‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î!")

        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
            raise


    def _update_database_schema(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–æ–±–∞–≤–ª—è—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            columns_to_add = [
                'junior_total_correct INTEGER DEFAULT 0',
                'junior_total_questions INTEGER DEFAULT 0',
                'middle_total_correct INTEGER DEFAULT 0',
                'middle_total_questions INTEGER DEFAULT 0'
            ]

            for column_def in columns_to_add:
                column_name = column_def.split(' ')[0]
                try:
                    cursor.execute(f'ALTER TABLE user_stats ADD COLUMN {column_def}')
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ {column_name}")
                except sqlite3.OperationalError:
                    # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                    pass


    def debug_check_table_columns(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ user_stats"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("PRAGMA table_info(user_stats)")
            columns = cursor.fetchall()
            print("üîç –ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã user_stats:")
            for col in columns:
                print(f"   {col[1]} ({col[2]})")


    def track_message(self, user_id: int, message_id: int):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_messages:
            self.user_messages[user_id] = []
        self.user_messages[user_id].append(message_id)


    def get_user_messages(self, user_id: int) -> List[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.user_messages.get(user_id, [])


    def clear_user_messages(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.user_messages:
            self.user_messages[user_id] = []


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
storage = Storage()
