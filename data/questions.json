{
  "questions": [
    {
      "id": 1,
      "question": "Что такое тест-кейс?",
      "options": [
        "Детализированная инструкция с шагами выполнения и ожидаемыми результатами",
        "Список функций для быстрой проверки без детальных шагов",
        "Формализованное описание условий и шагов для проверки функции",
        "Отчет о результатах тестирования"
      ],
      "correct_answer": 0,
      "explanation": "Тест-кейс - это документ, который описывает что, как и при каких условиях тестировать. Он включает шаги, ожидаемые результаты и тестовые данные."
    },
    {
      "id": 2,
      "question": "Что такое отчет о дефекте(баг-репорт)?",
      "options": [
        "Документ, описывающий обнаруженную ошибку",
        "План исправления ошибок",
        "Отчет о проделанной работе тестировщика",
        "Список всех тест-кейсов для проверки функциональности"
      ],
      "correct_answer": 0,
      "explanation": "Отчет о дефекте используется для описания найденных ошибок. Он должен содержать четкие шаги воспроизведения, ожидаемый и фактический результат."
    },
    {
      "id": 3,
      "question": "Что проверяет дымовое тестирование?",
      "options": [
        "Основную функциональность после сборки",
        "Влияние изменений на существующий функционал",
        "Поведение системы при максимальной нагрузке",
        "Защищенность от внешних атак"
      ],
      "correct_answer": 0,
      "explanation": "Дымовое тестирование проверяет основную функциональность приложения после сборки, чтобы убедиться, что ключевые функции работают перед глубоким тестированием."
    },
    {
      "id": 4,
      "question": "Когда выполняется регрессионное тестирование?",
      "options": [
        "После любых изменений в коде системы",
        "При добавлении нового функционала",
        "При исправлении критических ошибок",
        "Раз в месяц по установленному расписанию"
      ],
      "correct_answer": 0,
      "explanation": "Регрессионное тестирование выполняется после ЛЮБЫХ изменений в коде, чтобы убедиться что существующий функционал не сломан."
    },
    {
      "id": 5,
      "question": "Что такое тестовое окружение?",
      "options": [
        "Изолированная среда для выполнения тестирования",
        "Рабочее место инженера по тестированию",
        "Программное обеспечение для тестирования",
        "Документация по процессу тестирования"
      ],
      "correct_answer": 0,
      "explanation": "Тестовое окружение - это изолированная среда, максимально приближенная к рабочей, где выполняется тестирование."
    },
    {
      "id": 6,
      "question": "Что такое разделение на классы эквивалентности?",
      "options": [
        "Разделение входных данных на группы с одинаковым поведением",
        "Метод тестирования граничных значений диапазонов",
        "Тестирование всех возможных комбинаций параметров",
        "Случайный выбор тестовых данных из диапазона"
      ],
      "correct_answer": 0,
      "explanation": "Разделение на классы эквивалентности - техника тест-дизайна, где входные данные делятся на группы, которые должны обрабатываться системой одинаково."
    },
    {
      "id": 7,
      "question": "Что проверяет анализ граничных значений?",
      "options": [
        "Значения на границах допустимых диапазонов",
        "Все возможные значения внутри диапазона",
        "Только минимальные значения параметров",
        "Только максимальные значения параметров"
      ],
      "correct_answer": 0,
      "explanation": "Анализ граничных значений - техника тестирования, фокусирующаяся на значениях на границах входных доменов, где чаще всего встречаются ошибки."
    },
    {
      "id": 8,
      "question": "Когда используется попарное тестирование?",
      "options": [
        "Для тестирования комбинаций параметров при большом количестве вариантов",
        "Для тестирования только двух функций одновременно",
        "Для сравнения двух различных версий приложения",
        "Для тестирования пар пользовательских сценариев"
      ],
      "correct_answer": 0,
      "explanation": "Попарное тестирование используется для эффективного тестирования комбинаций входных параметров, покрывая все пары значений при минимальном количестве тестов."
    },
    {
      "id": 9,
      "question": "Что такое тестирование переходов состояний?",
      "options": [
        "Тестирование переходов между состояниями системы",
        "Тестирование производительности при пиковой нагрузке",
        "Тестирование пользовательского интерфейса",
        "Тестирование процессов миграции данных"
      ],
      "correct_answer": 0,
      "explanation": "Тестирование переходов состояний фокусируется на тестировании переходов между различными состояниями системы и реакций на события."
    },
    {
      "id": 10,
      "question": "Что такое тестирование на основе сценариев использования?",
      "options": [
        "Тестирование на основе пользовательских сценариев работы с системой",
        "Тестирование конкретных функций в изоляции",
        "Тестирование удобства использования интерфейса",
        "Тестирование в реальных условиях эксплуатации"
      ],
      "correct_answer": 0,
      "explanation": "Тестирование на основе сценариев использования основано на тестировании реальных сценариев работы с системой с точки зрения конечного пользователя."
    },
    {
      "id": 11,
      "question": "Какой статус дефекта указывает что разработчик начал работу над исправлением?",
      "options": [
        "В работе",
        "Открыт",
        "Переоткрыт",
        "Исправлен"
      ],
      "correct_answer": 0,
      "explanation": "Статус 'В работе' означает что разработчик начал работу над исправлением дефекта."
    },
    {
      "id": 12,
      "question": "Когда дефект получает статус 'Переоткрыт'?",
      "options": [
        "Когда исправление не работает и дефект воспроизводится снова",
        "Когда дефект открыт повторно после долгого времени",
        "Когда дефект отправлен на доработку разработчику",
        "Когда дефект является дубликатом другого дефекта"
      ],
      "correct_answer": 0,
      "explanation": "Статус 'Переоткрыт' присваивается когда исправление не работает и дефект воспроизводится при повторном тестировании."
    },
    {
      "id": 13,
      "question": "Что означает статус дефекта 'Не будет исправлен'?",
      "options": [
        "Дефект признан некритичным и не будет исправлен",
        "Дефект не может быть воспроизведен на стенде",
        "Дефект исправлен в следующей версии продукта",
        "Дефект требует дополнительной информации для воспроизведения"
      ],
      "correct_answer": 0,
      "explanation": "'Не будет исправлен' означает что дефект признан некритичным, несущественным или слишком дорогим для исправления."
    },
    {
      "id": 14,
      "question": "Какой статус дефекта указывает что исправление проверено и работает?",
      "options": [
        "Проверено",
        "Исправлен",
        "Закрыт",
        "Завершен"
      ],
      "correct_answer": 0,
      "explanation": "Статус 'Проверено' означает что тестировщик проверил исправление и подтвердил что дефект больше не воспроизводится."
    },
    {
      "id": 15,
      "question": "Когда дефект помечается как 'Дубликат'?",
      "options": [
        "Когда обнаружен повторно уже заведенный дефект",
        "Когда дефект найден в нескольких модулях системы",
        "Когда дефект имеет несколько различных причин",
        "Когда дефект воспроизводится на разных устройствах"
      ],
      "correct_answer": 0,
      "explanation": "'Дубликат' означает что этот дефект уже был заведен ранее и отслеживается под другим идентификатором."
    },
    {
      "id": 16,
      "question": "Что такое план тестирования?",
      "options": [
        "Документ описывающий стратегию и объем тестирования",
        "Список всех тест-кейсов проекта",
        "График выполнения тестовых прогонов",
        "Отчет о результатах тестирования"
      ],
      "correct_answer": 0,
      "explanation": "План тестирования - это основной документ тестирования, описывающий объем, подход, ресурсы, график и риски тестирования."
    },
    {
      "id": 17,
      "question": "Что должно быть в хорошем тест-кейсе?",
      "options": [
        "Шаги выполнения, ожидаемый результат, тестовые данные",
        "Только название и краткое описание",
        "Ссылки на требования и связанные дефекты",
        "Статус выполнения и дата последнего прогона"
      ],
      "correct_answer": 0,
      "explanation": "Хороший тест-кейс содержит четкие шаги выполнения, ожидаемый результат и необходимые тестовые данные."
    },
    {
      "id": 18,
      "question": "Что такое матрица трассируемости?",
      "options": [
        "Таблица связывающая требования и тест-кейсы",
        "Матрица приоритетов тестирования функциональности",
        "График зависимостей между тестовыми наборами",
        "Отчет о покрытии кода модульными тестами"
      ],
      "correct_answer": 0,
      "explanation": "Матрица трассируемости обеспечивает прослеживаемость требований к тест-кейсам, показывая покрытие требований тестированием."
    },
    {
      "id": 19,
      "question": "Что включает итоговый отчет о тестировании?",
      "options": [
        "Итоги тестирования, ключевые метрики, рекомендации",
        "Детальные результаты выполнения каждого тест-кейса",
        "Статистику по всем найденным дефектам",
        "План тестирования следующей версии продукта"
      ],
      "correct_answer": 0,
      "explanation": "Итоговый отчет о тестировании содержит итоги тестирования, ключевые метрики, выводы и рекомендации для заинтересованных сторон."
    },
    {
      "id": 20,
      "question": "Для чего используется чек-лист в тестировании?",
      "options": [
        "Для быстрой проверки ключевых функций без детальных тест-кейсов",
        "Для замены тест-кейсов в гибких методологиях",
        "Для отслеживания выполнения тестовых прогонов",
        "Для документирования процесса тестирования"
      ],
      "correct_answer": 0,
      "explanation": "Чек-листы используются для быстрой проверки ключевых функций, особенно когда нет времени на детальные тест-кейсы."
    },
    {
      "id": 21,
      "question": "Что такое HTTP статус код 200?",
      "options": [
        "Успешный запрос",
        "Ошибка на стороне клиента",
        "Ошибка на стороне сервера",
        "Перенаправление на другой адрес"
      ],
      "correct_answer": 0,
      "explanation": "HTTP 200 OK - статус успешного выполнения запроса."
    },
    {
      "id": 22,
      "question": "Какой метод HTTP используется для создания новых ресурсов?",
      "options": [
        "POST",
        "GET",
        "PUT",
        "DELETE"
      ],
      "correct_answer": 0,
      "explanation": "POST используется для создания новых ресурсов на сервере."
    },
    {
      "id": 23,
      "question": "Что такое REST API?",
      "options": [
        "Архитектурный стиль для создания веб-сервисов",
        "Протокол для передачи данных между системами",
        "Язык запросов к базам данных",
        "Фреймворк для тестирования веб-сервисов"
      ],
      "correct_answer": 0,
      "explanation": "REST (Representational State Transfer) - архитектурный стиль для создания масштабируемых веб-сервисов."
    },
    {
      "id": 24,
      "question": "Что проверяет негативное тестирование в API?",
      "options": [
        "Поведение системы на невалидные данные и ошибочные сценарии",
        "Только успешные сценарии использования интерфейса",
        "Производительность API под высокой нагрузкой",
        "Безопасность конечных точек веб-сервиса"
      ],
      "correct_answer": 0,
      "explanation": "Негативное тестирование проверяет как API обрабатывает невалидные данные, ошибки и граничные случаи."
    },
    {
      "id": 25,
      "question": "Что такое конечная точка в контексте API?",
      "options": [
        "URL который принимает запросы и возвращает ответы",
        "Конечная точка процесса тестирования",
        "Метод завершения API запроса",
        "Лимит количества запросов к API"
      ],
      "correct_answer": 0,
      "explanation": "Конечная точка - это конкретный URL API, который принимает запросы и возвращает ответы."
    },
    {
      "id": 26,
      "question": "Что делает SQL команда SELECT?",
      "options": [
        "Извлекает данные из базы данных",
        "Добавляет новые записи в таблицу",
        "Изменяет существующие данные в таблице",
        "Удаляет данные из таблицы базы данных"
      ],
      "correct_answer": 0,
      "explanation": "SELECT используется для извлечения данных из одной или нескольких таблиц базы данных."
    },
    {
      "id": 27,
      "question": "Что такое Первичный Ключ (PRIMARY KEY) в SQL?",
      "options": [
        "Уникальный идентификатор записи в таблице",
        "Основной индекс для ускорения поиска",
        "Главная таблица в реляционной базе данных",
        "Ключ для соединения связанных таблиц"
      ],
      "correct_answer": 0,
      "explanation": "Первичный ключ (PRIMARY KEY) - это уникальный идентификатор каждой записи в таблице, который не может содержать NULL значения и обеспечивает целостность данных."
    },
    {
      "id": 28,
      "question": "Для чего используется JOIN в SQL?",
      "options": [
        "Для объединения данных из нескольких таблиц",
        "Для соединения строк внутри одной таблицы",
        "Для объединения результатов нескольких запросов",
        "Для создания связей между различными базами данных"
      ],
      "correct_answer": 0,
      "explanation": "JOIN используется для объединения строк из двух или более таблиц на основе связанного столбца между ними."
    },
    {
      "id": 29,
      "question": "Что делает команда UPDATE в SQL?",
      "options": [
        "Изменяет существующие данные в таблице",
        "Обновляет структуру таблицы базы данных",
        "Добавляет новые столбцы в существующую таблицу",
        "Обновляет индексы для ускорения запросов"
      ],
      "correct_answer": 0,
      "explanation": "UPDATE изменяет существующие данные в таблице на основе указанного условия WHERE."
    },
    {
      "id": 30,
      "question": "Что такое Внешний Ключ (FOREIGN KEY) в SQL?",
      "options": [
        "Ссылка на Первичный Ключ (PRIMARY KEY) другой таблицы",
        "Внешний ключ для шифрования данных в таблице",
        "Ключ для доступа к внешней базе данных",
        "Резервный ключ таблицы на случай сбоев"
      ],
      "correct_answer": 0,
      "explanation": "Внешний ключ (FOREIGN KEY) - это поле в одной таблице, которое ссылается на Первичный ключ (PRIMARY KEY) в другой таблице, создавая связь между таблицами и обеспечивая ссылочную целостность данных."
    },
    {
      "id": 31,
      "question": "Что такое принцип 'пестицида' в тестировании?",
      "options": [
        "Тесты теряют эффективность при многократном выполнении",
        "Использование автоматизации для поиска дефектов",
        "Тестирование только критического функционала системы",
        "Постепенное накопление тестового покрытия кода"
      ],
      "correct_answer": 0,
      "explanation": "Принцип пестицида гласит, что при повторном прогоне одних и тех же тестов они находят всё меньше дефектов, так как система 'привыкает' к ним."
    },
    {
      "id": 32,
      "question": "Какое из утверждений лучше всего описывает 'исследовательское тестирование'?",
      "options": [
        "Одновременное изучение системы, проектирование и выполнение тестов",
        "Тестирование без предварительной подготовки тест-кейсов",
        "Случайная проверка функциональности приложения",
        "Тестирование новых возможностей системы"
      ],
      "correct_answer": 0,
      "explanation": "Исследовательское тестирование - это подход, при котором тестирование, изучение системы и проектирование тестов происходят параллельно."
    },
    {
      "id": 33,
      "question": "Что такое 'тестовый оракул'?",
      "options": [
        "Источник для определения правильности поведения системы",
        "Автоматизированная система тестирования",
        "Документ с ожидаемыми результатами тестов",
        "Методология валидации тестовых данных"
      ],
      "correct_answer": 0,
      "explanation": "Тестовый оракул - это любой источник, который помогает определить, прошёл тест или нет, сравнивая фактический результат с ожидаемым."
    },
    {
      "id": 34,
      "question": "Что такое 'санитарное тестирование'?",
      "options": [
        "Быстрая проверка конкретного исправления после сборки",
        "Полная проверка всей функциональности системы",
        "Тестирование чистоты кода и архитектуры",
        "Проверка безопасности данных приложения"
      ],
      "correct_answer": 0,
      "explanation": "Санитарное тестирование - это быстрая проверка того, что конкретное исправление работает как ожидалось, без глубокого тестирования всей системы."
    },
    {
      "id": 35,
      "question": "Какая разница между верификацией и валидацией?",
      "options": [
        "Верификация: правильно ли мы строим продукт; Валидация: правильный ли продукт мы строим",
        "Верификация: тестирование кода; Валидация: тестирование требований",
        "Верификация: автоматическое тестирование; Валидация: ручное тестирование",
        "Верификация: unit-тесты; Валидация: интеграционные тесты"
      ],
      "correct_answer": 0,
      "explanation": "Верификация проверяет, соответствует ли продукт спецификациям (правильно ли строим), а валидация - удовлетворяет ли он потребностям пользователя (правильный ли продукт)."
    },
    {
      "id": 36,
      "question": "Что такое 'принцип Парето' в тестировании?",
      "options": [
        "80% дефектов содержится в 20% модулей",
        "Тестирование должно покрывать 80% кода",
        "80% тестов должны быть автоматизированы",
        "20% тестов находят 80% дефектов"
      ],
      "correct_answer": 0,
      "explanation": "Принцип Парето в тестировании предполагает, что большинство дефектов сосредоточено в небольшой части модулей системы."
    },
    {
      "id": 37,
      "question": "Что такое 'тестирование удобства использования'?",
      "options": [
        "Оценка того, насколько легко пользоваться системой",
        "Тестирование скорости работы интерфейса",
        "Проверка соответствия интерфейса макетам",
        "Тестирование доступности для людей с ограничениями"
      ],
      "correct_answer": 0,
      "explanation": "Тестирование удобства использования оценивает, насколько легко и интуитивно понятно пользователи могут взаимодействовать с системой."
    },
    {
      "id": 38,
      "question": "Что проверяет 'нагрузочное тестирование'?",
      "options": [
        "Поведение системы под ожидаемой нагрузкой",
        "Максимальные возможности системы",
        "Стабильность системы при длительной работе",
        "Восстановление после сбоев"
      ],
      "correct_answer": 0,
      "explanation": "Нагрузочное тестирование проверяет поведение системы под ожидаемой в реальной эксплуатации нагрузкой."
    },
    {
      "id": 39,
      "question": "Что такое 'стресс-тестирование'?",
      "options": [
        "Проверка системы за пределами нормальной нагрузки",
        "Тестирование в условиях нехватки ресурсов",
        "Проверка реакции на некорректные данные",
        "Тестирование при одновременном доступе многих пользователей"
      ],
      "correct_answer": 0,
      "explanation": "Стресс-тестирование проверяет поведение системы при нагрузках, превышающих нормальные рабочие условия."
    },
    {
      "id": 40,
      "question": "Что такое 'объемное тестирование'?",
      "options": [
        "Тестирование с большими объемами данных",
        "Проверка всех возможностей системы",
        "Тестирование полного набора функциональности",
        "Проверка системы с максимальным количеством пользователей"
      ],
      "correct_answer": 0,
      "explanation": "Объемное тестирование проверяет работу системы с большими объемами данных в базе или обрабатываемых системой."
    },
    {
      "id": 41,
      "question": "Что такое 'тестирование безопасности'?",
      "options": [
        "Проверка защищенности системы от угроз",
        "Тестирование надежности хранения данных",
        "Проверка резервного копирования системы",
        "Тестирование отказоустойчивости приложения"
      ],
      "correct_answer": 0,
      "explanation": "Тестирование безопасности проверяет способность системы защищать данные и ресурсы от несанкционированного доступа."
    },
    {
      "id": 42,
      "question": "Что такое 'SQL инъекция'?",
      "options": [
        "Внедрение вредоносного SQL кода через входные данные",
        "Некорректное формирование SQL запросов",
        "Нарушение структуры базы данных",
        "Неавторизованный доступ к SQL серверу"
      ],
      "correct_answer": 0,
      "explanation": "SQL инъекция - это атака, при которой злоумышленник внедряет вредоносный SQL код через некорректно обработанные входные данные."
    },
    {
      "id": 43,
      "question": "Что такое 'XSS атака'?",
      "options": [
        "Внедрение вредоносного JavaScript кода на веб-страницу",
        "Кросс-сайтовая подделка запроса",
        "Меж-сайтовое копирование данных",
        "Несанкционированный доступ к сессии"
      ],
      "correct_answer": 0,
      "explanation": "XSS (Cross-Site Scripting) - это уязвимость, позволяющая внедрить вредоносный JavaScript код на веб-страницу."
    },
    {
      "id": 44,
      "question": "Что такое 'CSRF (Cross-Site Request Forgery) атака'?",
      "options": [
        "Выполнение действий от имени пользователя без его ведома",
        "Кража cookies пользователя",
        "Подделка идентификатора сессии",
        "Перехват пароля пользователя"
      ],
      "correct_answer": 0,
      "explanation": "CSRF (Cross-Site Request Forgery) - это атака, при которой действия выполняются от имени пользователя без его согласия."
    },
    {
      "id": 45,
      "question": "Что такое 'модель зрелости тестирования'?",
      "options": [
        "Уровень зрелости процессов тестирования в организации",
        "Модель оценки квалификации тестировщиков",
        "Система классификации дефектов по критичности",
        "Методология оценки покрытия тестами"
      ],
      "correct_answer": 0,
      "explanation": "Модель зрелости тестирования описывает уровни развития процессов тестирования в организации."
    },
    {
      "id": 46,
      "question": "Что такое 'TMMi' (Test Maturity Model integration)?",
      "options": [
        "Модель улучшения зрелости тестирования",
        "Методология тестирования мобильных приложений",
        "Инструмент для управления тестовыми данными",
        "Фреймворк для интеграционного тестирования"
      ],
      "correct_answer": 0,
      "explanation": "TMMi (Test Maturity Model integration) - это модель для оценки и улучшения зрелости процессов тестирования.",
      "topic": "процессы_тестирования",
      "difficulty": "сложный"
    },
    {
      "id": 47,
      "question": "Что такое 'нефункциональное тестирование'?",
      "options": [
        "Тестирование характеристик, а не функций системы",
        "Тестирование некритичного функционала",
        "Тестирование без использования спецификаций",
        "Тестирование дополнительных возможностей"
      ],
      "correct_answer": 0,
      "explanation": "Нефункциональное тестирование проверяет характеристики системы: производительность, надежность, безопасность и т.д."
    },
    {
      "id": 48,
      "question": "Что такое 'альфа-тестирование'?",
      "options": [
        "Тестирование силами разработчиков и тестировщиков внутри компании",
        "Раннее тестирование прототипа системы",
        "Тестирование самой первой версии продукта",
        "Автоматизированное тестирование кода"
      ],
      "correct_answer": 0,
      "explanation": "Альфа-тестирование проводится внутри организации силами разработчиков и тестировщиков перед выпуском бета-версии."
    },
    {
      "id": 49,
      "question": "Что такое 'бета-тестирование'?",
      "options": [
        "Тестирование реальными пользователями в рабочей среде",
        "Тестирование второй версии продукта",
        "Тестирование резервной копии системы",
        "Тестирование исправлений после альфа-тестирования"
      ],
      "correct_answer": 0,
      "explanation": "Бета-тестирование проводится реальными пользователями в условиях, приближенных к реальной эксплуатации."
    },
    {
      "id": 50,
      "question": "Что такое 'приемочное тестирование'?",
      "options": [
        "Финальное тестирование перед принятием продукта заказчиком",
        "Тестирование новой функциональности после разработки",
        "Тестирование возможности интеграции с другими системами",
        "Тестирование соответствия стандартам качества"
      ],
      "correct_answer": 0,
      "explanation": "Приемочное тестирование - это финальная стадия тестирования, когда заказчик проверяет, соответствует ли система его требованиям."
    },
    {
      "id": 51,
      "question": "Что такое 'критерии приемки'?",
      "options": [
        "Условия, которые должны быть выполнены для принятия функциональности",
        "Требования к качеству кода приложения",
        "Стандарты документирования тест-кейсов",
        "Метрики для оценки эффективности тестирования"
      ],
      "correct_answer": 0,
      "explanation": "Критерии приемки - это четкие условия, которые должны быть выполнены, чтобы функциональность считалась завершенной и готовой к принятию."
    },
    {
      "id": 52,
      "question": "Что такое 'Пользовательская История' (User Story) в гибкой разработке?",
      "options": [
        "Описание функциональности с точки зрения пользователя",
        "История использования системы тестировщиком",
        "Документация пользовательских сценариев",
        "Отчет о найденных дефектах от пользователей"
      ],
      "correct_answer": 0,
      "explanation": "'Пользовательская История' (User Story) - это краткое описание функциональности, написанное с точки зрения конечного пользователя."
    },
    {
      "id": 53,
      "question": "Что такое 'Определение Готовности' (Definition of Done) в Scrum?",
      "options": [
        "Критерии завершенности задачи для всей команды",
        "Определение готовности тест-кейсов",
        "Критерии окончания спринта",
        "Определение завершения проекта"
      ],
      "correct_answer": 0,
      "explanation": "Определение Готовности (Definition of Done) - это согласованный командой список критериев, которые должны быть выполнены для того, чтобы задача считалась завершенной и готовой к поставке."
    },
    {
      "id": 54,
      "question": "Что такое 'спринт' в Scrum?",
      "options": [
        "Фиксированный период времени для выполнения работ",
        "Период интенсивного тестирования",
        "Время на исправление критических дефектов",
        "Этап приемочного тестирования"
      ],
      "correct_answer": 0,
      "explanation": "Спринт - это фиксированный по времени период (обычно 1-4 недели), в течение которого команда выполняет запланированные работы."
    },
    {
      "id": 55,
      "question": "Что такое ежедневный стендап (daily stand-up)?",
      "options": [
        "Ежедневная короткая встреча команды для синхронизации",
        "Ежедневный отчет о статусе тестирования",
        "Ежедневное планирование тестовых работ",
        "Ежедневный обзор найденных дефектов"
      ],
      "correct_answer": 0,
      "explanation": "Ежедневный стендап (Daily stand-up) - это короткая ежедневная встреча команды для обсуждения прогресса и проблем."
    },
    {
      "id": 56,
      "question": "Что такое 'ретроспектива' в Scrum?",
      "options": [
        "Встреча для анализа прошедшего спринта и улучшения процессов",
        "Обзор выполненных тест-кейсов за спринт",
        "Анализ статистики дефектов за период",
        "Планирование следующего спринта тестирования"
      ],
      "correct_answer": 0,
      "explanation": "Ретроспектива - это встреча в конце спринта для анализа того, что прошло хорошо, что можно улучшить и принятия решений по улучшению процессов."
    },
    {
      "id": 57,
      "question": "Что такое 'Kanban'?",
      "options": [
        "Методология управления работами с визуализацией потока",
        "Система приоритизации тестовых задач",
        "Инструмент для отслеживания дефектов",
        "Методология планирования тестирования"
      ],
      "correct_answer": 0,
      "explanation": "Kanban - это методология управления работами, основанная на визуализации потока задач и ограничении работ в процессе."
    },
    {
      "id": 58,
      "question": "Что такое 'Лимит Незавершенной Работы' (WIP limit) в Kanban?",
      "options": [
        "Ограничение количества задач в работе одновременно",
        "Лимит времени на выполнение задачи",
        "Ограничение количества тестировщиков на проекте",
        "Лимит дефектов в одном модуле"
      ],
      "correct_answer": 0,
      "explanation": "Лимит Незавершенной Работы 'WIP' (Work In Progress) limit - это ограничение количества задач, которые могут находиться в работе на каждом этапе процесса."
    },
    {
      "id": 59,
      "question": "Что такое 'непрерывная интеграция'?",
      "options": [
        "Автоматическое объединение кода и запуск тестов",
        "Постоянное тестирование новой функциональности",
        "Интеграционное тестирование после каждого коммита",
        "Непрерывный процесс ревью кода"
      ],
      "correct_answer": 0,
      "explanation": "Непрерывная интеграция - это практика автоматического объединения кода разработчиков в общий репозиторий с последующим запуском тестов."
    },
    {
      "id": 60,
      "question": "Что такое 'непрерывная поставка'?",
      "options": [
        "Автоматическая подготовка кода к развертыванию в любой момент",
        "Постоянное обновление рабочей среды",
        "Автоматическое развертывание после каждого коммита",
        "Непрерывный процесс выпуска версий"
      ],
      "correct_answer": 0,
      "explanation": "Непрерывная поставка - это практика автоматической подготовки кода к развертыванию в рабочую среду в любой момент."
    },
    {
      "id": 61,
      "question": "Что такое 'unit-тестирование'?",
      "options": [
        "Тестирование отдельных компонентов или функций изолированно",
        "Тестирование минимального набора функциональности",
        "Тестирование пользовательских интерфейсов",
        "Тестирование базовых модулей системы"
      ],
      "correct_answer": 0,
      "explanation": "Unit-тестирование - это тестирование отдельных компонентов, модулей или функций программы в изоляции от остальных частей системы."
    },
    {
      "id": 62,
      "question": "Что такое 'интеграционное тестирование'?",
      "options": [
        "Тестирование взаимодействия между компонентами системы",
        "Тестирование интеграции с внешними системами",
        "Тестирование объединенных модулей приложения",
        "Тестирование процесса сборки системы"
      ],
      "correct_answer": 0,
      "explanation": "Интеграционное тестирование проверяет взаимодействие и совместную работу различных компонентов или модулей системы."
    },
    {
      "id": 63,
      "question": "Что такое 'системное тестирование'?",
      "options": [
        "Тестирование полной интегрированной системы",
        "Тестирование всех функций приложения",
        "Тестирование системы в рабочей среде",
        "Тестирование производительности всей системы"
      ],
      "correct_answer": 0,
      "explanation": "Системное тестирование проверяет полную интегрированную систему на соответствие требованиям."
    },
    {
      "id": 64,
      "question": "Что такое 'end-to-end тестирование'?",
      "options": [
        "Тестирование полного пользовательского сценария от начала до конца",
        "Тестирование всех компонентов системы вместе",
        "Тестирование от интерфейса до базы данных",
        "Тестирование всего жизненного цикла приложения"
      ],
      "correct_answer": 0,
      "explanation": "End-to-end тестирование проверяет полные пользовательские сценарии от начала до конца, включая все задействованные системы."
    },
    {
      "id": 65,
      "question": "Что такое 'модульное тестирование'?",
      "options": [
        "Тестирование отдельных модулей программы",
        "Тестирование архитектуры модулей системы",
        "Тестирование взаимосвязей между модулями",
        "Тестирование размера и сложности модулей"
      ],
      "correct_answer": 0,
      "explanation": "Модульное тестирование - это тестирование отдельных модулей или компонентов программы на корректность их работы."
    },
    {
      "id": 66,
      "question": "Что такое 'черный ящик' в тестировании?",
      "options": [
        "Тестирование без знания внутренней структуры системы",
        "Тестирование скрытой функциональности",
        "Тестирование недокументированных возможностей",
        "Тестирование внутренней логики приложения"
      ],
      "correct_answer": 0,
      "explanation": "Тестирование методом черного ящика предполагает тестирование системы без знания ее внутреннего устройства, основываясь только на спецификациях."
    },
    {
      "id": 67,
      "question": "Что такое 'белый ящик' в тестировании?",
      "options": [
        "Тестирование с знанием внутренней структуры и кода системы",
        "Тестирование видимой функциональности",
        "Тестирование документации и спецификаций",
        "Тестирование пользовательского интерфейса"
      ],
      "correct_answer": 0,
      "explanation": "Тестирование методом белого ящика предполагает тестирование с знанием внутренней структуры, алгоритмов и реализации системы."
    },
    {
      "id": 68,
      "question": "Что такое 'серый ящик' в тестировании?",
      "options": [
        "Тестирование с частичным знанием внутренней структуры",
        "Тестирование промежуточных версий системы",
        "Тестирование с ограниченным доступом к коду",
        "Тестирование не до конца реализованной функциональности"
      ],
      "correct_answer": 0,
      "explanation": "Тестирование методом серого ящика сочетает подходы черного и белого ящиков - тестировщик имеет частичное знание о внутреннем устройстве системы."
    },
    {
      "id": 69,
      "question": "Что такое 'тестовые данные'?",
      "options": [
        "Данные, специально подготовленные для выполнения тестов",
        "Реальные данные из рабочей среды",
        "Данные для проверки производительности",
        "Данные для тестирования базы данных"
      ],
      "correct_answer": 0,
      "explanation": "Тестовые данные - это данные, специально подготовленные и используемые для выполнения тестовых сценариев."
    },
    {
      "id": 70,
      "question": "Что такое 'маскирование данных'?",
      "options": [
        "Замена конфиденциальных данных на фиктивные для тестирования",
        "Сокрытие тестовых данных от разработчиков",
        "Шифрование данных в тестовой среде",
        "Удаление лишних данных из тестовых наборов"
      ],
      "correct_answer": 0,
      "explanation": "Маскирование данных - это процесс замены конфиденциальных или персональных данных на реалистичные, но фиктивные данные для использования в тестовых средах."
    },
    {
      "id": 71,
      "question": "Что такое 'регрессионное тестирование'?",
      "options": [
        "Повторное тестирование для проверки, что изменения не сломали существующий функционал",
        "Тестирование предыдущих версий системы",
        "Тестирование исправлений старых дефектов",
        "Тестирование устаревшей функциональности"
      ],
      "correct_answer": 0,
      "explanation": "Регрессионное тестирование выполняется для проверки того, что последние изменения в коде не нарушили существующую функциональность."
    },
    {
      "id": 72,
      "question": "Что такое 'набор регрессии'?",
      "options": [
        "Набор тестов для проверки основного функционала после изменений",
        "Коллекция старых дефектов для повторной проверки",
        "Набор тестов для устаревших функций",
        "Коллекция тестов для предыдущих версий"
      ],
      "correct_answer": 0,
      "explanation": "Набор регрессии - это специально отобранный набор тестов, который выполняется для проверки основного функционала после внесения изменений в систему."
    },
    {
      "id": 73,
      "question": "Что такое 'приоритет дефекта'?",
      "options": [
        "Важность исправления дефекта с точки зрения бизнеса",
        "Срочность исправления дефекта",
        "Сложность исправления дефекта",
        "Влияние дефекта на пользователей"
      ],
      "correct_answer": 0,
      "explanation": "Приоритет дефекта определяет важность его исправления с точки зрения бизнес-требований и влияния на пользователей."
    },
    {
      "id": 74,
      "question": "Что такое 'серьезность дефекта'?",
      "options": [
        "Степень воздействия дефекта на работу системы",
        "Количество пользователей, затронутых дефектом",
        "Сложность воспроизведения дефекта",
        "Время на исправление дефекта"
      ],
      "correct_answer": 0,
      "explanation": "Серьезность дефекта описывает степень его воздействия на функциональность системы - от косметических проблем до полной неработоспособности."
    },
    {
      "id": 75,
      "question": "Что такое 'критический дефект'?",
      "options": [
        "Дефект, блокирующий основную функциональность системы",
        "Дефект, требующий немедленного исправления",
        "Дефект, влияющий на безопасность системы",
        "Дефект, найденный в продакшн среде"
      ],
      "correct_answer": 0,
      "explanation": "Критический дефект - это дефект, который блокирует основную функциональность системы и делает ее непригодной для использования."
    },
    {
      "id": 76,
      "question": "Что такое 'мажорный дефект'?",
      "options": [
        "Дефект, существенно влияющий на функциональность, но не блокирующий систему",
        "Дефект, найденный в основном функционале",
        "Дефект, требующий исправления в текущем спринте",
        "Дефект, влияющий на большинство пользователей"
      ],
      "correct_answer": 0,
      "explanation": "Мажорный дефект существенно влияет на функциональность, но система остается в основном работоспособной."
    },
    {
      "id": 77,
      "question": "Что такое 'минорный дефект'?",
      "options": [
        "Незначительная проблема, не влияющая на основную функциональность",
        "Дефект в дополнительном функционале",
        "Дефект, найденный в тестовой среде",
        "Дефект, не требующий немедленного исправления"
      ],
      "correct_answer": 0,
      "explanation": "Минорный дефект - это незначительная проблема, которая не влияет на основную функциональность системы."
    },
    {
      "id": 78,
      "question": "Что такое 'тривиальный дефект'?",
      "options": [
        "Косметическая проблема, не влияющая на функциональность",
        "Дефект в документации",
        "Опечатка в пользовательском интерфейсе",
        "Незначительное отклонение от макетов"
      ],
      "correct_answer": 0,
      "explanation": "Тривиальный дефект - это косметическая проблема, которая не влияет на функциональность системы, например, опечатка или незначительное визуальное отклонение."
    },
    {
      "id": 79,
      "question": "Что такое 'Анализ Корневых Причин' (Root cause analysis)?",
      "options": [
        "Анализ для определения первопричины проблемы",
        "Анализ количества дефектов в модуле",
        "Исследование времени на исправление дефектов",
        "Анализ повторяющихся дефектов"
      ],
      "correct_answer": 0,
      "explanation": "Анализ Корневых Причин (Root cause analysis) - это процесс определения основной, фундаментальной причины проблемы или дефекта."
    },
    {
      "id": 80,
      "question": "Что такое 'Метод 5 вопросов Почему' (5 Whys) в анализе причин?",
      "options": [
        "Метод поиска корневой причины через последовательные вопросы 'почему'",
        "Анализ пяти основных причин дефектов",
        "Метод оценки пяти параметров качества",
        "Анализ дефектов по пяти категориям серьезности"
      ],
      "correct_answer": 0,
      "explanation": "Метод 5 вопросов Почему (5 Whys) - это техника поиска корневой причины проблемы через последовательное задавание вопроса 'почему' (обычно 5 раз)."
    },
    {
      "id": 81,
      "question": "Что такое Диаграмма Исикавы (рыбья кость), (fishbone diagram)?",
      "options": [
        "Диаграмма Исикавы для анализа причин проблем",
        "Диаграмма зависимости дефектов от времени",
        "График распределения дефектов по модулям",
        "Схема взаимосвязи различных типов дефектов"
      ],
      "correct_answer": 0,
      "explanation": "Диаграмма Исикавы (рыбья кость) - это инструмент для визуального анализа и группировки возможных причин проблемы."
    },
    {
      "id": 82,
      "question": "Что такое 'метрики тестирования'?",
      "options": [
        "Измеряемые показатели процесса тестирования",
        "Статистика найденных дефектов",
        "Показатели покрытия тестами",
        "Методы оценки качества тестирования"
      ],
      "correct_answer": 0,
      "explanation": "Метрики тестирования - это количественные показатели, используемые для измерения различных аспектов процесса тестирования."
    },
    {
      "id": 83,
      "question": "Что такое 'покрытие кода тестами'?",
      "options": [
        "Процент кода, выполняемого при запуске тестов",
        "Количество тест-кейсов на модуль кода",
        "Соотношение тестов и строк кода",
        "Процент требований, покрытых тестами"
      ],
      "correct_answer": 0,
      "explanation": "Покрытие кода тестами - это метрика, показывающая процент строк кода, которые выполняются при запуске тестов."
    },
    {
      "id": 84,
      "question": "Что такое 'покрытие требований'?",
      "options": [
        "Процент требований, покрытых тест-кейсами",
        "Количество требований в спецификации",
        "Соответствие тестов бизнес-требованиям",
        "Процент реализованных требований"
      ],
      "correct_answer": 0,
      "explanation": "Покрытие требований - это метрика, показывающая процент требований, для которых созданы тест-кейсы."
    },
    {
      "id": 85,
      "question": "Что такое 'эффективность тестирования'?",
      "options": [
        "Способность тестов находить дефекты в системе",
        "Скорость выполнения тестовых прогонов",
        "Соотношение найденных и пропущенных дефектов",
        "Процент успешно пройденных тестов"
      ],
      "correct_answer": 0,
      "explanation": "Эффективность тестирования измеряет способность тестового процесса находить дефекты в системе."
    },
    {
      "id": 86,
      "question": "Что такое 'плотность дефектов'?",
      "options": [
        "Количество дефектов на единицу размера продукта",
        "Концентрация дефектов в определенном модуле",
        "Соотношение дефектов и тест-кейсов",
        "Плотность расположения дефектов в коде"
      ],
      "correct_answer": 0,
      "explanation": "Плотность дефектов - это метрика, показывающая количество дефектов на единицу измерения размера продукта (например, на 1000 строк кода)."
    },
    {
      "id": 87,
      "question": "Что такое Процент Пропущенных Дефектов (escape rate)?",
      "options": [
        "Процент дефектов, пропущенных тестированием и найденных в продакшн",
        "Скорость появления новых дефектов",
        "Процент дефектов, не исправленных в срок",
        "Количество дефектов, найденных после релиза"
      ],
      "correct_answer": 0,
      "explanation": "Процент Пропущенных Дефектов (Escape rate) - это метрика, показывающая процент дефектов, которые были пропущены в процессе тестирования и обнаружены в рабочей среде."
    },
    {
      "id": 88,
      "question": "Что такое 'тестовая стратегия'?",
      "options": [
        "Высокоуровневый документ, описывающий подход к тестированию",
        "Детальный план тестовых активностей",
        "Набор принципов и методов тестирования",
        "Стратегия автоматизации тестирования"
      ],
      "correct_answer": 0,
      "explanation": "Тестовая стратегия - это высокоуровневый документ, описывающий общий подход, объем и методы тестирования для проекта."
    },
    {
      "id": 89,
      "question": "Что такое 'критерии начала тестирования'?",
      "options": [
        "Условия, которые должны быть выполнены для начала тестирования",
        "Требования к готовности тестовой среды",
        "Критерии готовности тест-кейсов",
        "Условия начала нового тестового цикла"
      ],
      "correct_answer": 0,
      "explanation": "Критерии начала тестирования - это условия, которые должны быть выполнены перед началом тестовых активностей (например, готова тестовая среда, получена стабильная сборка)."
    },
    {
      "id": 90,
      "question": "Что такое 'критерии завершения тестирования'?",
      "options": [
        "Условия, при которых тестирование считается завершенным",
        "Критерии успешного прохождения тестов",
        "Условия для подписания акта приемки",
        "Требования к качеству для релиза"
      ],
      "correct_answer": 0,
      "explanation": "Критерии завершения тестирования - это заранее определенные условия, при достижении которых тестирование считается завершенным."
    },
    {
      "id": 91,
      "question": "Что такое 'риск-ориентированное тестирование'?",
      "options": [
        "Подход, при котором тестирование фокусируется на областях с наибольшим риском",
        "Тестирование с учетом возможных рисков проекта",
        "Тестирование рискованных функциональностей",
        "Подход, минимизирующий риски пропуска дефектов"
      ],
      "correct_answer": 0,
      "explanation": "Риск-ориентированное тестирование - это подход, при котором тестовые усилия сосредотачиваются на областях системы с наибольшим потенциальным риском."
    },
    {
      "id": 92,
      "question": "Что такое 'анализ рисков' в тестировании?",
      "options": [
        "Процесс идентификации и оценки потенциальных проблем",
        "Анализ рисков пропуска критических дефектов",
        "Оценка рисков для тестовой среды",
        "Анализ бизнес-рисков проекта"
      ],
      "correct_answer": 0,
      "explanation": "Анализ рисков в тестировании - это процесс идентификации, анализа и оценки потенциальных проблем, которые могут повлиять на успех тестирования."
    },
    {
      "id": 93,
      "question": "Что такое 'матрица рисков'?",
      "options": [
        "Таблица для оценки и приоритизации рисков",
        "Матрица зависимости рисков от функциональности",
        "Таца влияния рисков на проект",
        "Матрица распределения рисков по команде"
      ],
      "correct_answer": 0,
      "explanation": "Матрица рисков - это инструмент для визуализации и приоритизации рисков на основе их вероятности и воздействия."
    },
    {
      "id": 94,
      "question": "Что такое 'тестирование на основе рисков'?",
      "options": [
        "Подход, при котором тестовые усилия распределяются согласно оценке рисков",
        "Тестирование в условиях повышенного риска",
        "Тестирование рискованных изменений в первую очередь",
        "Подход, минимизирующий риски для бизнеса"
      ],
      "correct_answer": 0,
      "explanation": "Тестирование на основе рисков - это подход, при котором тестовые усилия, ресурсы и приоритеты распределяются в соответствии с оценкой рисков."
    },
    {
      "id": 95,
      "question": "Что такое 'модель зрелости Capability Maturity Model'?",
      "options": [
        "Модель оценки зрелости процессов разработки",
        "Модель оценки квалификации команды",
        "Модель зрелости тестовых процессов",
        "Модель оценки технологической зрелости"
      ],
      "correct_answer": 0,
      "explanation": "CMM (Capability Maturity Model) - это модель для оценки и улучшения зрелости процессов разработки программного обеспечения."
    },
    {
      "id": 96,
      "question": "Что такое 'V-модель' в тестировании?",
      "options": [
        "Модель, связывающая этапы тестирования с этапами разработки",
        "Модель валидации и верификации требований",
        "Модель жизненного цикла тестирования",
        "Модель последовательного выполнения тестов"
      ],
      "correct_answer": 0,
      "explanation": "V-модель - это модель разработки, которая связывает каждый этап тестирования с соответствующим этапом разработки требований и проектирования."
    },
    {
      "id": 97,
      "question": "Что такое 'Waterfall (водопадная) модель'?",
      "options": [
        "Последовательная модель разработки с четкими этапами",
        "Модель разработки с постоянным тестированием",
        "Модель с обратной связью между этапами",
        "Модель с параллельной разработкой и тестированием"
      ],
      "correct_answer": 0,
      "explanation": "Waterfall (водопадная) модель - это последовательный подход к разработке, где каждый этап завершается полностью перед началом следующего."
    },
    {
      "id": 98,
      "question": "Что такое 'Spiral (спиральная) модель'?",
      "options": [
        "Итеративная модель с акцентом на анализ рисков",
        "Модель с постепенным наращиванием функциональности",
        "Модель с циклическим процессом разработки",
        "Модель со спиральным увеличением сложности"
      ],
      "correct_answer": 0,
      "explanation": "Spiral (спиральная) модель - это итеративный подход к разработке, где каждая итерация включает анализ рисков и прототипирование.",
      "topic": "модели_разработки",
      "difficulty": "сложный"
    },
    {
      "id": 99,
      "question": "Что такое 'Agile манифест'?",
      "options": [
        "Набор ценностей и принципов гибкой разработки",
        "Документ с правилами Agile методологий",
        "Манифест быстрой разработки программного обеспечения",
        "Свод принципов итеративной разработки"
      ],
      "correct_answer": 0,
      "explanation": "Agile манифест - это декларация из четырех ценностей и двенадцати принципов, лежащих в основе гибких методологий разработки."
    },
    {
      "id": 100,
      "question": "Что такое 'DevOps'?",
      "options": [
        "Культура и практики объединения разработки и эксплуатации",
        "Методология автоматизации процессов разработки",
        "Подход к непрерывной интеграции и поставке",
        "Культура сотрудничества между командами"
      ],
      "correct_answer": 0,
      "explanation": "DevOps - это культурное движение и набор практик, направленных на объединение процессов разработки и эксплуатации для ускорения доставки программного обеспечения."
    }
  ]
}
